#!/bin/sh

# this almost works.
# ssgl, multiverse and snis server run in the container, and snis client from
# out side the container can connect to ssgl and from there to snis_server, but
# multiverse never spawns any new snis_server instances (or if it does, they die
# immediately.
#
# The logfiles for snis_server and snis_multiverse are very short.
# I don't know where the output from these programs is going which makes
# it hard to debug.

echo "This configuration runs ssgl_server, snis_multiverse with"
echo "autowrangling turned on, and starts one snis_server instance,"
echo "all in a single container."

NAME="ssgl-mv-and-servers"
IMAGE="snis-server-mv-ssgl-with-assets"

# Source a litte docker shell library
if [ -f ./docker-shell-library ]
then
	. ./docker-shell-library
else
	if [ -f ./configs/docker-shell-library ]
	then
		. ./configs//docker-shell-library
	fi
fi

exit_if_group_not_docker

usage()
{
	printf "Usage: $0 [ setup | teardown ]\n" 1>&2
	exit 1
}

setup()
{
	echo "Setting up $NAME"
	exit_if_no_such_docker_image "$IMAGE"
	run_or_start_docker_container "$NAME" "$IMAGE"
	docker exec -d "$NAME" sh -c \
		'bin/ssgl_server ; \
		 mkdir -p /home/snis/.local/share/space-nerds-in-space ; \
		 bin/snis_multiverse --allow-remote-networks -a -l localhost -n nickname -L narnia -e default 2>&1 > \
			/home/snis/.local/share/space-nerds-in-space/snis_multiverse.log & \
		 bin/snis_server --allow-remote-networks -l localhost -L DEFAULT -m narnia -s default 2>&1 > \
			/home/snis/.local/share/space-nerds-in-space/snis_server_default.log &'
	printf "\n\nConnect your local snis_client instance to lobby at 172.17.0.2\n\n"
	return 0;
}

teardown()
{
	echo "Tearing down $NAME"
	stop_and_remove_docker_container "$NAME"
	return $?
}

case "$1" in
	setup)
		setup
		return $?
		;;
	teardown)
		teardown
		return $?
		;;
	*)
		usage
		;;
esac
