
To anyone reading this, you should know I've been using docker for slightly
more than one day, so do not take any of this as anything but the scribblings of
an ignorant amateur.

Installed docker engine according to these instructions:

https://docs.docker.com/engine/install/ubuntu/

on advice from dfirebaugh.  He says the distro apt packages tend to
be old enough to cause problems.

Note about "docker" unix group-id:

Generally, you want your real group id to be "docker" when
executing the "docker" command.  So you should open a new
terminal for docker operations, and do "newgrp docker" to
change your real group ID to docker.

Otherwise you will have sudo and run docker as root, which is not
ideal.  Note, if you go tromping around touching/creating lots of
files, all those files will get tagged with group of "docker",
which you may not want, so exercise discipline in what you do
after the "newgrp".

Note also that newgrp starts a new shell, so you can "exit" to get
back to your regular group.  If you want to do "newgrp" inside of a
shellscript, do this:

	newgrp docker<<EOF
	put docker commands here
	EOF

An important distinction must be made between docker *images* and
docker *containers*.  A docker image is like a snapshot of the
filesystem that a container will start up with.  A docker container
is an environment for processes to run in that begins with a docker
image and a process (which may fork/exec more processes in the container).
If the processes in the container writes to the filesystem, they do so
in a kind of overlay, so that the original image they started with is
unchanged, but from inside the container, it appears to change.  You
may start many docker containers from a single docker image.  Building
and image *seems* to work by running stuff in the container, then taking
a snapshot of the filesystem at the end (I don't know if that's really
how it works, it's an educated guess.)

Various docker commands:
------------------------

docker build -t image-name .
	build a docker image from the current directory. It is expected
	there will be a Dockerfile named Dockerfile in the current directory.

docker pull ubuntu[:tag]
	download ubuntu docker image from https://hub.docker.com/search
	optionally a tagged version.

docker image ls
docker image list
	show docker images you have
	the <none> <none> images that may show up are "layers"
	sometimes there can be dangling "<none> <none>" images that take up space,
	which you can find by:

		docker images -f "dangling=true" -q

	and remove by:

		docker rmi $(docker images -f "dangling=true" -q)


docker run -d -t --name hostname ubuntu
		create a new docker instance? named "hostname" using image "ubuntu"
		-d means "detached"
		-t means allocate a pseudo-TTY
		-i means interactive
		--rm means it will remove itself when it is stopped
		--name name-of-container
		-p port:port maps host port to container port, e.g. "-p 80:80" for http, etc.
		--network network-name
			special network-name of "host" means container just shares network interface(s)
			with the host.
			See also: "docker network create", below
		--ip ip-address
			give container an IP address, useful on macvlan network type.

		You can do:
			docker run -it --name hostname image bash

		but when you exit bash, the container will stop.  Stopped containers
		won't show up in "docker ps" output (only "docker ps -a"). Instead you can do:

			docker run -itd --name hostname image # create detached process/container
			docker exect -it hostname bash # exec bash in the named container

		and when you exit bash the container won't be stopped, and you can "exec" into
		it again later.

docker attach container-name

	Attach to a container, will get you a shell in the running process.  If you exit
	the shell, the container will stop.

	How to detach from a container (three ways):

	1.  IF the container was started with -i -t, press ctrl-p ctrl-q
	2.  IF the container was started with -i, but NOT -t, ctrl-c will work.
	3.  pkill -9 -f 'docker.*attach'  (-9 is vital to prevent the docker attach
		process from propagating the signal to the container.
	from: https://stackoverflow.com/questions/25267372/correct-way-to-detach-from-a-container-without-stopping-it

docker ps
	show docker containers (by default, only running containers)
	-a - show all containers
	will also show what ports are exposed

docker exec -it hostname bash
	execute bash shell in hostname
	-i = interactive
	-t = tty

docker stop containername [ containername ... ]
	stop container(s) (does not delete container, unless container was run with --rm)

docker start containername
	restarts stopped container

docker stats
	shows stats of all containers

docker rmi imagename
	removes a docker image

docker log container-name
	Shows a log of everything to stdout from the container

Docker network stuff:
---------------------

docker network ls
	show networks

	$ docker network ls
	NETWORK ID     NAME      DRIVER    SCOPE
	29fa509b0f6b   bridge    bridge    local
	2c6e1dfd2337   host      host      local
	123f369316a8   none      null      local

docker network rm network-name
	removes named network (if containers are on the network, you won't be able to remove it.)

docker network create network-name
docker network create
	Create a new named network

	-d network-driver
		network-driver is the type of network.  Default is "bridge".
	--subnet subnet-spec
	--gateway gateway-address
	-o parent=interface
	--ip-range

	Other network drivers:
		macvlan
			containers get their own MAC addresses on same port as host
			Means they connect to your router

			docker create network -d macvlan --subnet 192.168.1.0/24 \
				--gateway 192.168.1.1 -o parent=wlp0s20f3 your-network-name

			where wlp0s20f3 is the name of the host network interface from
			"ip address show".

			You *must* connect your macvlan net to a physical network interface.

			when you run a container on macvlan network, you have to give it ip addr
			with "--ip" flag of "docker run" command.

			NOTE: it may be the case that switches and routers get confused by having
				multiple MAC addresses showing up on the same physical port.
			NOTE: You need to enable promiscuous mode on the host interface for macvlan
				to work. See below.

			macvlan networks have two modes. "bridge" mode (default) and 802.1q
			(I'm going to ignore this for now.)

		ipvlan (layer 2)

			Same as macvlan, except the virtual network interfaces share the same MAC
			addresses as the host. (Eliminates need for promiscuous mode, problems with
			switches and routers not handling multiple MAC addresses on a single physical
			port.)  So should behave better, so long as networking equipment doesn't mind
			seeing many IP addresses all sharing a MAC address.

			docker create network -d ipvlan --subnet 192.168.95.0/24 --gateway 192.168.1.1 \
				-o parent=wlp0s20f3 your-network-name

			As with macvlan, containers must be told their IP address with --ip option of
			"docker run" command.

		ipvlan (layer 3)

			Example, creating 2 subnets:

			docker create network -d ipvlan --subnet 192.168.95.0/24 \
				-o parent=wlp0s20f3 -o ipvlan_mode=l3 \
				--subnet 192.168.96.0/24 your-network-name

			If you want to create multiple subnets on the same physical interface, you
			must do it in a single "docker create network" command.

			Note: you have to create static routes in your router for, say, 192.168.1.xxx to
			know how to route to 192.168.95.xxx, so that's a pain in the ass.  I was hoping
			docker had virtual routers, or something to route between the vlans without a
			physical router being involved.

			Here's maybe how to do it without having to involve your physical router.
			(I haven't tried this yet).  On the host, create a virtual network interface
			for each subnet, and give it an IP address on each subnet.  For each container
			on each subnet, set the default gateway to the hosts IP address on that subnet.
			Then the host acts as the router, and no fiddling with vendor specific
			routing hardware.

			E.g.: from here: https://linuxconfig.org/configuring-virtual-network-interfaces-in-linux
			(WARNING I have not tried this):


			Repeat for all docker subnets:

				$ sudo modprobe dummy # load dummy module allowing creation of virtual network interfaces
				$ sudo ip link add eth0 type dummy
				$ ip link show eth0
				$ sudo ifconfig eth0 hw ether C8:D7:4A:4E:47:50 # give it a MAC address (make it up?)

				Now give it an IP address on the desired subnet

				$ sudo ip addr add 192.168.95.1/24 brd + dev eth0 label eth0:0

				Bring the interface up

				$ sudo ip link set dev eth0 up

docker inspect
	docker inspect network-name
	E.g: "docker inspect bridge"
	show stuff about bridge, like network address, netmask,
	what containers are connected and the containers' IP addrs


General unix/linux network stuff:
---------------------------------

ip address show
	show this hosts network interfaces, ip addresses, MAC addresses, etc.
	(the "new" way to do "ifconfig -a")

bridge link
	show interface names and what's bridged

ip route
	show routing table ("new" way to do "netstat -r")

	Compare:
                        $ netstat -nr
                        Kernel IP routing table
                        Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
Default route ---->     0.0.0.0         192.168.1.1     0.0.0.0         UG        0 0          0 wlp0s20f3
"link-local"  ---->     169.254.0.0     0.0.0.0         255.255.0.0     U         0 0          0 wlp0s20f3
route to docker net --> 172.17.0.0      0.0.0.0         255.255.0.0     U         0 0          0 docker0
route to host LAN -->   192.168.1.0     0.0.0.0         255.255.255.0   U         0 0          0 wlp0s20f3

                        $ ip route
Default route ---->     default via 192.168.1.1 dev wlp0s20f3 proto dhcp metric 600
"link-local"  ---->     169.254.0.0/16 dev wlp0s20f3 scope link metric 1000
route to docker net --> 172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 linkdown
route to host LAN -->   192.168.1.0/24 dev wlp0s20f3 proto kernel scope link src 192.168.1.169 metric 600

ip link set interface-name promisc on
	Enable promiscuous mode on an interface ("ip address show" to see interfaces).
	Useful for macvlan network types.

Acknowledgments:
----------------

Most of the information in this file was gleaned from this video:
https://www.youtube.com/watch?v=bKFMS5C4CG0 by "NetworkChuck"


